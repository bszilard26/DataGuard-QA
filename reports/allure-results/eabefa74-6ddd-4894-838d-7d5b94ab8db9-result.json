{"name": "test_login_swag_labs", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 133\nCurrent browser version is 136.0.7103.93 with binary path /Applications/Google Chrome.app/Contents/MacOS/Google Chrome\nStacktrace:\n0   chromedriver                        0x000000010337f94c cxxbridge1$str$ptr + 2728228\n1   chromedriver                        0x0000000103377fa8 cxxbridge1$str$ptr + 2697088\n2   chromedriver                        0x0000000102eddff0 cxxbridge1$string$len + 93348\n3   chromedriver                        0x0000000102f16060 cxxbridge1$string$len + 322836\n4   chromedriver                        0x0000000102f151e8 cxxbridge1$string$len + 319132\n5   chromedriver                        0x0000000102f11094 cxxbridge1$string$len + 302408\n6   chromedriver                        0x0000000102f0d1e0 cxxbridge1$string$len + 286356\n7   chromedriver                        0x0000000102f5229c cxxbridge1$string$len + 569168\n8   chromedriver                        0x0000000102f51b10 cxxbridge1$string$len + 567236\n9   chromedriver                        0x0000000102f19004 cxxbridge1$string$len + 335032\n10  chromedriver                        0x00000001033481f4 cxxbridge1$str$ptr + 2501068\n11  chromedriver                        0x000000010334b508 cxxbridge1$str$ptr + 2514144\n12  chromedriver                        0x000000010332d8a4 cxxbridge1$str$ptr + 2392188\n13  chromedriver                        0x000000010334bdb0 cxxbridge1$str$ptr + 2516360\n14  chromedriver                        0x000000010331e934 cxxbridge1$str$ptr + 2330892\n15  chromedriver                        0x00000001033681e0 cxxbridge1$str$ptr + 2632120\n16  chromedriver                        0x0000000103368368 cxxbridge1$str$ptr + 2632512\n17  chromedriver                        0x0000000103377c1c cxxbridge1$str$ptr + 2696180\n18  libsystem_pthread.dylib             0x0000000199c4dc0c _pthread_start + 136\n19  libsystem_pthread.dylib             0x0000000199c48b80 thread_start + 8", "trace": "@pytest.mark.skipif(\"CI\" in os.environ, reason=\"Skip UI test in Docker/CI\")\n    def test_login_swag_labs():\n>       driver = webdriver.Chrome()\n\ntests/ui/test_login_ui.py:9: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv/lib/python3.11/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__\n    super().__init__(\nvenv/lib/python3.11/site-packages/selenium/webdriver/chromium/webdriver.py:67: in __init__\n    super().__init__(command_executor=executor, options=options)\nvenv/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:260: in __init__\n    self.start_session(capabilities)\nvenv/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:357: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\nvenv/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:448: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x106af8fd0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: This version of Chro...000199c4dc0c _pthread_start + 136\\\\n19  libsystem_pthread.dylib             0x0000000199c48b80 thread_start + 8\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 133\nE       Current browser version is 136.0.7103.93 with binary path /Applications/Google Chrome.app/Contents/MacOS/Google Chrome\nE       Stacktrace:\nE       0   chromedriver                        0x000000010337f94c cxxbridge1$str$ptr + 2728228\nE       1   chromedriver                        0x0000000103377fa8 cxxbridge1$str$ptr + 2697088\nE       2   chromedriver                        0x0000000102eddff0 cxxbridge1$string$len + 93348\nE       3   chromedriver                        0x0000000102f16060 cxxbridge1$string$len + 322836\nE       4   chromedriver                        0x0000000102f151e8 cxxbridge1$string$len + 319132\nE       5   chromedriver                        0x0000000102f11094 cxxbridge1$string$len + 302408\nE       6   chromedriver                        0x0000000102f0d1e0 cxxbridge1$string$len + 286356\nE       7   chromedriver                        0x0000000102f5229c cxxbridge1$string$len + 569168\nE       8   chromedriver                        0x0000000102f51b10 cxxbridge1$string$len + 567236\nE       9   chromedriver                        0x0000000102f19004 cxxbridge1$string$len + 335032\nE       10  chromedriver                        0x00000001033481f4 cxxbridge1$str$ptr + 2501068\nE       11  chromedriver                        0x000000010334b508 cxxbridge1$str$ptr + 2514144\nE       12  chromedriver                        0x000000010332d8a4 cxxbridge1$str$ptr + 2392188\nE       13  chromedriver                        0x000000010334bdb0 cxxbridge1$str$ptr + 2516360\nE       14  chromedriver                        0x000000010331e934 cxxbridge1$str$ptr + 2330892\nE       15  chromedriver                        0x00000001033681e0 cxxbridge1$str$ptr + 2632120\nE       16  chromedriver                        0x0000000103368368 cxxbridge1$str$ptr + 2632512\nE       17  chromedriver                        0x0000000103377c1c cxxbridge1$str$ptr + 2696180\nE       18  libsystem_pthread.dylib             0x0000000199c4dc0c _pthread_start + 136\nE       19  libsystem_pthread.dylib             0x0000000199c48b80 thread_start + 8\n\nvenv/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:232: SessionNotCreatedException"}, "attachments": [{"name": "log", "source": "acc35084-d763-456b-8457-64c77513f18c-attachment.txt", "type": "text/plain"}], "start": 1746828422749, "stop": 1746828423805, "uuid": "54064eec-7ded-42a5-8c25-b35b189e5a0d", "historyId": "35ee1ea4751b83bf52a94a1b0746842a", "testCaseId": "35ee1ea4751b83bf52a94a1b0746842a", "fullName": "tests.ui.test_login_ui#test_login_swag_labs", "labels": [{"name": "tag", "value": "@pytest.mark.skipif(False, reason='Skip UI test in Docker/CI')"}, {"name": "parentSuite", "value": "tests.ui"}, {"name": "suite", "value": "test_login_ui"}, {"name": "host", "value": "ROC-QDJCXXHW"}, {"name": "thread", "value": "5414-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.ui.test_login_ui"}]}