{"name": "test_login_swag_labs", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchDriverException: Message: Unable to obtain driver for chrome; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors/driver_location", "trace": "self = <selenium.webdriver.common.driver_finder.DriverFinder object at 0xffffa69753c0>\n\n    def _binary_paths(self) -> dict:\n        if self._paths[\"driver_path\"]:\n            return self._paths\n    \n        browser = self._options.capabilities[\"browserName\"]\n        try:\n            path = self._service.path\n            if path:\n                logger.debug(\n                    \"Skipping Selenium Manager; path to %s driver specified in Service class: %s\", browser, path\n                )\n                if not Path(path).is_file():\n                    raise ValueError(f\"The path is not a valid file: {path}\")\n                self._paths[\"driver_path\"] = path\n            else:\n>               output = SeleniumManager().binary_paths(self._to_args())\n\n/usr/local/lib/python3.10/site-packages/selenium/webdriver/common/driver_finder.py:67: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/site-packages/selenium/webdriver/common/selenium_manager.py:47: in binary_paths\n    args = [str(self._get_binary())] + args\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    @staticmethod\n    def _get_binary() -> Path:\n        \"\"\"Determines the path of the correct Selenium Manager binary.\n    \n        :Returns: The Selenium Manager executable location\n    \n        :Raises: WebDriverException if the platform is unsupported\n        \"\"\"\n    \n        compiled_path = Path(__file__).parent.joinpath(\"selenium-manager\")\n        exe = sysconfig.get_config_var(\"EXE\")\n        if exe is not None:\n            compiled_path = compiled_path.with_suffix(exe)\n    \n        path: Optional[Path] = None\n    \n        if (env_path := os.getenv(\"SE_MANAGER_PATH\")) is not None:\n            logger.debug(\"Selenium Manager set by env SE_MANAGER_PATH to: %s\", env_path)\n            path = Path(env_path)\n        elif compiled_path.exists():\n            path = compiled_path\n        else:\n            allowed = {\n                (\"darwin\", \"any\"): \"macos/selenium-manager\",\n                (\"win32\", \"any\"): \"windows/selenium-manager.exe\",\n                (\"cygwin\", \"any\"): \"windows/selenium-manager.exe\",\n                (\"linux\", \"x86_64\"): \"linux/selenium-manager\",\n                (\"freebsd\", \"x86_64\"): \"linux/selenium-manager\",\n                (\"openbsd\", \"x86_64\"): \"linux/selenium-manager\",\n            }\n    \n            arch = platform.machine() if sys.platform in (\"linux\", \"freebsd\", \"openbsd\") else \"any\"\n            if sys.platform in [\"freebsd\", \"openbsd\"]:\n                logger.warning(\"Selenium Manager binary may not be compatible with %s; verify settings\", sys.platform)\n    \n            location = allowed.get((sys.platform, arch))\n            if location is None:\n>               raise WebDriverException(f\"Unsupported platform/architecture combination: {sys.platform}/{arch}\")\nE               selenium.common.exceptions.WebDriverException: Message: Unsupported platform/architecture combination: linux/aarch64\n\n/usr/local/lib/python3.10/site-packages/selenium/webdriver/common/selenium_manager.py:94: WebDriverException\n\nThe above exception was the direct cause of the following exception:\n\n    @pytest.mark.skipif(\"CI\" in os.environ, reason=\"Skip UI test in Docker/CI\")\n    def test_login_swag_labs():\n>       driver = webdriver.Chrome()\n\ntests/ui/test_login_ui.py:9: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__\n    super().__init__(\n/usr/local/lib/python3.10/site-packages/selenium/webdriver/chromium/webdriver.py:51: in __init__\n    if finder.get_browser_path():\n/usr/local/lib/python3.10/site-packages/selenium/webdriver/common/driver_finder.py:47: in get_browser_path\n    return self._binary_paths()[\"browser_path\"]\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.common.driver_finder.DriverFinder object at 0xffffa69753c0>\n\n    def _binary_paths(self) -> dict:\n        if self._paths[\"driver_path\"]:\n            return self._paths\n    \n        browser = self._options.capabilities[\"browserName\"]\n        try:\n            path = self._service.path\n            if path:\n                logger.debug(\n                    \"Skipping Selenium Manager; path to %s driver specified in Service class: %s\", browser, path\n                )\n                if not Path(path).is_file():\n                    raise ValueError(f\"The path is not a valid file: {path}\")\n                self._paths[\"driver_path\"] = path\n            else:\n                output = SeleniumManager().binary_paths(self._to_args())\n                if Path(output[\"driver_path\"]).is_file():\n                    self._paths[\"driver_path\"] = output[\"driver_path\"]\n                else:\n                    raise ValueError(f'The driver path is not a valid file: {output[\"driver_path\"]}')\n                if Path(output[\"browser_path\"]).is_file():\n                    self._paths[\"browser_path\"] = output[\"browser_path\"]\n                else:\n                    raise ValueError(f'The browser path is not a valid file: {output[\"browser_path\"]}')\n        except Exception as err:\n            msg = f\"Unable to obtain driver for {browser}\"\n>           raise NoSuchDriverException(msg) from err\nE           selenium.common.exceptions.NoSuchDriverException: Message: Unable to obtain driver for chrome; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors/driver_location\n\n/usr/local/lib/python3.10/site-packages/selenium/webdriver/common/driver_finder.py:78: NoSuchDriverException"}, "start": 1746829180243, "stop": 1746829180245, "uuid": "5b6aac69-977e-494b-9dd8-d5e1339f9a41", "historyId": "35ee1ea4751b83bf52a94a1b0746842a", "testCaseId": "35ee1ea4751b83bf52a94a1b0746842a", "fullName": "tests.ui.test_login_ui#test_login_swag_labs", "labels": [{"name": "tag", "value": "@pytest.mark.skipif(False, reason='Skip UI test in Docker/CI')"}, {"name": "parentSuite", "value": "tests.ui"}, {"name": "suite", "value": "test_login_ui"}, {"name": "host", "value": "4fc0e46cded2"}, {"name": "thread", "value": "1-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.ui.test_login_ui"}]}